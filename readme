# Cooling System Escape — Guide

Welcome to the Cooling System Escape challenge! This interactive single-page app helps students learn the automotive cooling system through mini-tasks, hints, and a final OTP unlock sequence.

## Quick start
Teacher Password: `otto1876`

Open `index.html` in any modern browser.

- Sound can be toggled (🔊 button).
- Wrong answers add a 10s time penalty (visible in the header).
- As you solve tasks, you collect OTP digits (top bar).
- Solve the small riddle to enable the OTP entry, then enter your 6-digit code (ascending order of first six unique digits found).

### Themes

- Use the Theme selector (top-right) to switch between Playful, Icy, and Thermal looks.
- The choice is saved for your next visit.

## Tasks overview

1. Coolant Flow Order — Select Pump → Engine Block → Thermostat → Radiator.
2. Cooling Component Functions — Match pump/thermostat/radiator/cap to their roles.
3. Unscramble Cooling Terms — Radiator, Thermostat, Coolant, Reservoir.
4. Recommended Mix — Enter 50:50 (also accepts 50/50, 5050, 1:1).
5. Diagnostic Analysis — Overheats at idle but cools at speed → Fan inoperative.
6. Pressure Conversion — Convert 1.1 bar → ~16 psi.
7. Flow Initials — PETR.
8. Thermostat States — 30°C, 80°C, 95°C → CPO.
9. Symptom Correlation — Map heater/white smoke/coolant loss to likely causes.
10. Boiling Point — Accepts 118–130°C for 50/50 under pressure.
11. Heat Transfer Modes — Coolant→wall (Convection), through metal (Conduction), fin→air (Convection).
12. Thermostat Opening Range — Accepts a sensible range like low 80–85 and high 88–92 (e.g., 80–90).
13. Cooling Riddle — pump-thermostat-radiator-reservoir (also pump-stat-radiator-reservoir).
14. Radiator Flow Direction — Top-to-bottom (animated SVG).
15. Label the Cooling Diagram — Fill all 15 labels, then decode first letters via the path to complete the task.

## Task 15 diagram key (canonical labels)

These are used for fuzzy-matching your entries:

1. Radiator
2. Radiator cap
3. Upper hose
4. Thermostat housing
5. Thermostat
6. Cylinder head
7. Engine block
8. Water pump
9. Lower hose
10. Heater core
11. Heater hoses
12. Cooling fan
13. Fan shroud
14. Expansion tank
15. Temperature sensor

The secret message path is: 7→1→13→4→9→2→15→8→3→11→5→14→6→10→12. Enter the resulting 15-letter code in the Task 15 input.

## Teacher controls

Open the Teacher Controls panel at the bottom. Password: `otto1876`.

- Winning OTP (ascending order): configure string of 6 digits.
- Riddle Answer: default `42` (88 + 4 − 50); adjust for your class if desired.
- Task 15 expected code: update if you change labels/sequence.
- Reset Game: reloads the page to clear progress.

## Theming

The page supports multiple themes via CSS variables in `index-cooling.html`:

- `--bg`, `--panel`, `--ink`, `--muted`, `--accent`, `--good`, `--bad`, `--warn`.
- Buttons, panels, and progress bar colors inherit from these variables.

To tweak the look:
- Adjust the gradient layers on the `body` for different ambient effects.
- Change `--accent` for a different highlight hue.
- Edit `.panel`, `.btn`, and `.badge` for alternative styles.

## Media suggestions

- Add a short loop (GIF/WebM/MP4) of radiator airflow or fan operation to enrich Task 14.
- Add a high-resolution photo of a thermostat or radiator cap near Tasks 2/12.

Place your files in the same folder and reference them using `<img src="your-file" />` or a `<video>` tag. The app also includes a self-contained SVG diagram for Task 15, so it works without extra assets.

## Multiplayer (Beta)

You can play locally across tabs/windows and optionally across devices.

- Enter your name, then:
	- Teacher clicks Create Room (a 4-char code displays). Share this code.
	- Students enter the room code and click Join.
- Scoreboard will show each player’s solved count and elapsed time.
- Each player gets a unique OTP mapping (based on room + name), so final codes differ.

Cross-device realtime:

1. Start the included WebSocket relay server (Node 18+):
	 - `node server.js`
	 - You’ll see: `WebSocket relay running on ws://localhost:3000`
2. In the app’s Multiplayer section, set Server (WebSocket) to `ws://<yourhost>:3000`.
3. Create/join the room again. Progress will sync across devices.

Experimental WebRTC:

- Without a server, use the “Experimental: Peer-to-Peer (WebRTC)” section to copy/paste offers/answers.
- This is a demo scaffold; use the WebSocket server for a smoother experience.

## Troubleshooting

- If answers seem correct but aren’t accepted, check spacing and spelling. Some fields use fuzzy-matching, but short labels may still need to match.
- If sound fails on first play, browser may require a user gesture (click anywhere, then toggle sound).
- Use Teacher Controls to reveal/change the expected riddle and Task 15 code for debugging.
- If cross-device scoreboard doesn’t update, verify the WebSocket server URL and that your firewall allows connections.

Have fun, and stay cool! ❄️

## Hosting on GitHub Pages

This app is a single, static HTML file and works great on GitHub Pages out of the box.

What works on Pages:
- All tasks, hints, timer, penalties, riddle, OTP logic
- Theme toggle and persistence
- Local scoreboard sync across tabs/windows in the same browser profile (BroadcastChannel)

For cross-device multiplayer you need a server:
- The included `server.js` is a tiny WebSocket relay intended to run elsewhere (for example on a small VM or Render/Fly/Glitch). GitHub Pages can’t run Node servers.
- When deployed publicly, use a secure WebSocket URL (wss://). Many browsers block ws:// from https pages.
- Enter your relay URL in the Multiplayer panel under “Server (WebSocket)” and then create/join a room.

Optional P2P (experimental):
- The manual WebRTC copy/paste flow can work without a server, but it’s fiddly and not guaranteed across restricted networks. Prefer the WebSocket relay for classrooms.

Setup tips:
1) Push this repo to GitHub and enable Pages for the `main` branch (root). Your app will be at `https://<user>.github.io/<repo>/index-cooling.html`.
2) If using the relay, deploy `server.js` to any Node host and note the `wss://` URL.
3) Open the app, set your name/room, and (optionally) set the server URL to sync progress across devices.
